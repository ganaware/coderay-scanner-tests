comment(// https://msdn.microsoft.com/en-us/library/vstudio/bb311043.aspx)

keyword(class) class(WhereSample)
operator({)
    directive(static) directive(void) ident(Main)operator((\))
    operator({)   
        comment(// Simple data source. Arrays support IEnumerable<T>. )
        predefined_type(int)operator([]) ident(numbers) operator(=) operator({) integer(5)operator(,) integer(4)operator(,) integer(1)operator(,) integer(3)operator(,) integer(9)operator(,) integer(8)operator(,) integer(6)operator(,) integer(7)operator(,) integer(2)operator(,) integer(0) operator(};)

        comment(// Simple query with one predicate in where clause. )
        keyword(var) ident(queryLowNums) operator(=)
            keyword(from) ident(num) keyword(in) ident(numbers)
            keyword(where) ident(num) operator(<) integer(5)
            keyword(select) ident(num)operator(;)

        comment(// Execute the query. )
        keyword(foreach) operator(()keyword(var) ident(s) keyword(in) ident(queryLowNums)operator(\))
        operator({)
            ident(Console)operator(.)ident(Write)operator(()ident(s)operator(.)ident(ToString)operator((\)) operator(+) string<delimiter(")content( )delimiter(")>operator(\);)
        operator(})
    operator(})
operator(})
comment(//Output: 4 1 3 2 0)

keyword(class) class(WhereSample2)
operator({)
    directive(static) directive(void) ident(Main)operator((\))
    operator({)
        comment(// Data source. )
        predefined_type(int)operator([]) ident(numbers) operator(=) operator({) integer(5)operator(,) integer(4)operator(,) integer(1)operator(,) integer(3)operator(,) integer(9)operator(,) integer(8)operator(,) integer(6)operator(,) integer(7)operator(,) integer(2)operator(,) integer(0) operator(};)

        comment(// Create the query with two predicates in where clause. )
        keyword(var) ident(queryLowNums2) operator(=)
            keyword(from) ident(num) keyword(in) ident(numbers)
            keyword(where) ident(num) operator(<) integer(5) operator(&&) ident(num) operator(%) integer(2) operator(==) integer(0)
            keyword(select) ident(num)operator(;)

        comment(// Execute the query )
        keyword(foreach) operator(()keyword(var) ident(s) keyword(in) ident(queryLowNums2)operator(\))
        operator({)
            ident(Console)operator(.)ident(Write)operator(()ident(s)operator(.)ident(ToString)operator((\)) operator(+) string<delimiter(")content( )delimiter(")>operator(\);)
        operator(})
        ident(Console)operator(.)ident(WriteLine)operator((\);)

        comment(// Create the query with two where clause. )
        keyword(var) ident(queryLowNums3) operator(=)
            keyword(from) ident(num) keyword(in) ident(numbers)
            keyword(where) ident(num) operator(<) integer(5)
            keyword(where) ident(num) operator(%) integer(2) operator(==) integer(0)
            keyword(select) ident(num)operator(;)

        comment(// Execute the query )
        keyword(foreach) operator(()keyword(var) ident(s) keyword(in) ident(queryLowNums3)operator(\))
        operator({)
            ident(Console)operator(.)ident(Write)operator(()ident(s)operator(.)ident(ToString)operator((\)) operator(+) string<delimiter(")content( )delimiter(")>operator(\);)
        operator(})

    operator(})
operator(})
comment(// Output:  )
comment(// 4 2 0 )
comment(// 4 2 0)

keyword(class) class(WhereSample3)
operator({)       
    directive(static) directive(void) ident(Main)operator((\))
    operator({)
        comment(// Data source )
        predefined_type(int)operator([]) ident(numbers) operator(=) operator({) integer(5)operator(,) integer(4)operator(,) integer(1)operator(,) integer(3)operator(,) integer(9)operator(,) integer(8)operator(,) integer(6)operator(,) integer(7)operator(,) integer(2)operator(,) integer(0) operator(};)

        comment(// Create the query with a method call in the where clause. )
        comment(// Note: This won't work in LINQ to SQL unless you have a )
        comment(// stored procedure that is mapped to a method by this name. )
        keyword(var) ident(queryEvenNums) operator(=)
            keyword(from) ident(num) keyword(in) ident(numbers)
            keyword(where) ident(IsEven)operator(()ident(num)operator(\))
            keyword(select) ident(num)operator(;)

         comment(// Execute the query. )
        keyword(foreach) operator(()keyword(var) ident(s) keyword(in) ident(queryEvenNums)operator(\))
        operator({)
            ident(Console)operator(.)ident(Write)operator(()ident(s)operator(.)ident(ToString)operator((\)) operator(+) string<delimiter(")content( )delimiter(")>operator(\);)
        operator(})
    operator(})

    comment(// Method may be instance method or static method. )
    directive(static) predefined_type(bool) ident(IsEven)operator(()predefined_type(int) ident(i)operator(\))
    operator({)
        keyword(return) ident(i) operator(%) integer(2) operator(==) integer(0)operator(;)
    operator(})    
operator(})
comment(//Output: 4 8 6 2 0)
