// single line comment

// multi line comment
/*
multi line comment
*/

// preprocessors
#if false
...
#endif
#region OKあいうえお漢字OK

#endregion
#pragma warning disable 0123

// $
$;


// keywords
abstract;
as;
base;
bool;
break;
byte;
case;
catch;
char;
checked;
class;
const;
continue;
decimal;
default;
delegate;
do;
double;
else;
enum;
event;
explicit;
extern;
false;
finally;
fixed;
float;
for;
foreach;
goto;
if;
implicit;
in;
int;
interface;
internal;
is;
lock;
long;
namespace;
new;
null;
object;
operator;
out;
override;
params;
private;
protected;
public;
readonly;
ref;
return;
sbyte;
sealed;
short;
sizeof;
stackalloc;
static;
string;
struct;
switch;
this;
throw;
true;
try;
typeof;
uint;
ulong;
unchecked;
unsafe;
ushort;
using;
virtual;
void;
volatile;
while;
// contextual keywords
add;
alias;
ascending;
async;
await;
descending;
dynamic;
from;
get;
global;
group;
into;
join;
let;
orderby;
partial;
remove;
select;
set;
value;
var;
where;
yield;
// identifier
@abstract;
@as;
@base;
@bool;
@break;
@byte;
@case;
@catch;
@char;
@checked;
@class;
@const;
@continue;
@decimal;
@default;
@delegate;
@do;
@double;
@else;
@enum;
@event;
@explicit;
@extern;
@false;
@finally;
@fixed;
@float;
@for;
@foreach;
@goto;
@if;
@implicit;
@in;
@int;
@interface;
@internal;
@is;
@lock;
@long;
@namespace;
@new;
@null;
@object;
@operator;
@out;
@override;
@params;
@private;
@protected;
@public;
@readonly;
@ref;
@return;
@sbyte;
@sealed;
@short;
@sizeof;
@stackalloc;
@static;
@string;
@struct;
@switch;
@this;
@throw;
@true;
@try;
@typeof;
@uint;
@ulong;
@unchecked;
@unsafe;
@ushort;
@using;
@virtual;
@void;
@volatile;
@while;
@add;
@alias;
@ascending;
@async;
@await;
@descending;
@dynamic;
@from;
@get;
@global;
@group;
@into;
@join;
@let;
@orderby;
@partial;
@remove;
@select;
@set;
@value;
@var;
@where;
@yield;

// B.1.8 Literals

// boolean-literal:
true;
false;

// integer-literal:
//   decimal-integer-literal
0123456789;
0123456789U;
0123456789u;
0123456789L;
0123456789l;
0123456789UL;
0123456789Ul;
0123456789uL;
0123456789ul;
0123456789LU;
0123456789Lu;
0123456789lU;
0123456789lu;
//   hexadecimal-integer-literal
0x0123456789ABCDEFabcdef;
0x0123456789ABCDEFabcdefU;
0x0123456789ABCDEFabcdefu;
0x0123456789ABCDEFabcdefL;
0x0123456789ABCDEFabcdefl;
0x0123456789ABCDEFabcdefUL;
0x0123456789ABCDEFabcdefUl;
0x0123456789ABCDEFabcdefuL;
0x0123456789ABCDEFabcdeful;
0x0123456789ABCDEFabcdefLU;
0x0123456789ABCDEFabcdefLu;
0x0123456789ABCDEFabcdeflU;
0x0123456789ABCDEFabcdeflu;
0X0123456789ABCDEFabcdef;
0X0123456789ABCDEFabcdefU;
0X0123456789ABCDEFabcdefu;
0X0123456789ABCDEFabcdefL;
0X0123456789ABCDEFabcdefl;
0X0123456789ABCDEFabcdefUL;
0X0123456789ABCDEFabcdefUl;
0X0123456789ABCDEFabcdefuL;
0X0123456789ABCDEFabcdeful;
0X0123456789ABCDEFabcdefLU;
0X0123456789ABCDEFabcdefLu;
0X0123456789ABCDEFabcdeflU;
0X0123456789ABCDEFabcdeflu;

// real-literal:
//   decimal-digits . decimal-digits exponent-part(opt) real-type-suffix(opt)
0123456789.0123456789;
0123456789.0123456789e0123456789;
0123456789.0123456789e+0123456789;
0123456789.0123456789e-0123456789;
0123456789.0123456789;
0123456789.0123456789E0123456789;
0123456789.0123456789E+0123456789;
0123456789.0123456789E-0123456789;

0123456789.0123456789F;
0123456789.0123456789e0123456789F;
0123456789.0123456789e+0123456789F;
0123456789.0123456789e-0123456789F;
0123456789.0123456789F;
0123456789.0123456789E0123456789F;
0123456789.0123456789E+0123456789F;
0123456789.0123456789E-0123456789F;

0123456789.0123456789f;
0123456789.0123456789e0123456789f;
0123456789.0123456789e+0123456789f;
0123456789.0123456789e-0123456789f;
0123456789.0123456789f;
0123456789.0123456789E0123456789f;
0123456789.0123456789E+0123456789f;
0123456789.0123456789E-0123456789f;

0123456789.0123456789D;
0123456789.0123456789e0123456789D;
0123456789.0123456789e+0123456789D;
0123456789.0123456789e-0123456789D;
0123456789.0123456789D;
0123456789.0123456789E0123456789D;
0123456789.0123456789E+0123456789D;
0123456789.0123456789E-0123456789D;

0123456789.0123456789d;
0123456789.0123456789e0123456789d;
0123456789.0123456789e+0123456789d;
0123456789.0123456789e-0123456789d;
0123456789.0123456789d;
0123456789.0123456789E0123456789d;
0123456789.0123456789E+0123456789d;
0123456789.0123456789E-0123456789d;

0123456789.0123456789M;
0123456789.0123456789e0123456789M;
0123456789.0123456789e+0123456789M;
0123456789.0123456789e-0123456789M;
0123456789.0123456789M;
0123456789.0123456789E0123456789M;
0123456789.0123456789E+0123456789M;
0123456789.0123456789E-0123456789M;

0123456789.0123456789m;
0123456789.0123456789e0123456789m;
0123456789.0123456789e+0123456789m;
0123456789.0123456789e-0123456789m;
0123456789.0123456789m;
0123456789.0123456789E0123456789m;
0123456789.0123456789E+0123456789m;
0123456789.0123456789E-0123456789m;
//   . decimal-digits exponent-part(opt) real-type-suffix(opt)
.0123456789;
.0123456789e0123456789;
.0123456789e+0123456789;
.0123456789e-0123456789;
.0123456789;
.0123456789E0123456789;
.0123456789E+0123456789;
.0123456789E-0123456789;

.0123456789F;
.0123456789e0123456789F;
.0123456789e+0123456789F;
.0123456789e-0123456789F;
.0123456789F;
.0123456789E0123456789F;
.0123456789E+0123456789F;
.0123456789E-0123456789F;

.0123456789f;
.0123456789e0123456789f;
.0123456789e+0123456789f;
.0123456789e-0123456789f;
.0123456789f;
.0123456789E0123456789f;
.0123456789E+0123456789f;
.0123456789E-0123456789f;

.0123456789D;
.0123456789e0123456789D;
.0123456789e+0123456789D;
.0123456789e-0123456789D;
.0123456789D;
.0123456789E0123456789D;
.0123456789E+0123456789D;
.0123456789E-0123456789D;

.0123456789d;
.0123456789e0123456789d;
.0123456789e+0123456789d;
.0123456789e-0123456789d;
.0123456789d;
.0123456789E0123456789d;
.0123456789E+0123456789d;
.0123456789E-0123456789d;

.0123456789M;
.0123456789e0123456789M;
.0123456789e+0123456789M;
.0123456789e-0123456789M;
.0123456789M;
.0123456789E0123456789M;
.0123456789E+0123456789M;
.0123456789E-0123456789M;

.0123456789m;
.0123456789e0123456789m;
.0123456789e+0123456789m;
.0123456789e-0123456789m;
.0123456789m;
.0123456789E0123456789m;
.0123456789E+0123456789m;
.0123456789E-0123456789m;
//   decimal-digits   exponent-part   real-type-suffix(opt)
0123456789e0123456789;
0123456789e+0123456789;
0123456789e-0123456789;
0123456789E0123456789;
0123456789E+0123456789;
0123456789E-0123456789;

0123456789e0123456789F;
0123456789e+0123456789F;
0123456789e-0123456789F;
0123456789E0123456789F;
0123456789E+0123456789F;
0123456789E-0123456789F;

0123456789e0123456789f;
0123456789e+0123456789f;
0123456789e-0123456789f;
0123456789E0123456789f;
0123456789E+0123456789f;
0123456789E-0123456789f;

0123456789e0123456789D;
0123456789e+0123456789D;
0123456789e-0123456789D;
0123456789E0123456789D;
0123456789E+0123456789D;
0123456789E-0123456789D;

0123456789e0123456789d;
0123456789e+0123456789d;
0123456789e-0123456789d;
0123456789E0123456789d;
0123456789E+0123456789d;
0123456789E-0123456789d;

0123456789e0123456789M;
0123456789e+0123456789M;
0123456789e-0123456789M;
0123456789E0123456789M;
0123456789E+0123456789M;
0123456789E-0123456789M;

0123456789e0123456789m;
0123456789e+0123456789m;
0123456789e-0123456789m;
0123456789E0123456789m;
0123456789E+0123456789m;
0123456789E-0123456789m;
//   decimal-digits real-type-suffix
0123456789F;
0123456789f;
0123456789D;
0123456789d;
0123456789M;
0123456789m;

// character-literal:
'a';
'あ';
'\'';
'\"';
'\\';
'\0';
'\a';
'\b';
'\f';
'\n';
'\r';
'\t';
'\v';
'\x0';
'\x0123';
'\xabcd';
'\xABCD';
'\u0123';
'\uabcd';
'\uABCD';
'\U01234567';
'\U78abcdef';
'\U78ABCDEF';

// string-literal:
//   regular-string-literal
"aあ";
"\'\"\\\0\a\b\f\n\r\t\v";
"\x0\x0123\xabcd\xABCD";
"\u0123\uabcd\uABCD";
"\U01234567\U78abcdef\U78ABCDEF";
//   verbatim-string-literal
@"abc""\n\x1";
@"abc
def
g";

// B.1.9 Operators and punctuators
{ } [ ] ( ) . , : ;
+ - * / % & | ^ ! ~
= < > ? ?? :: ++ -- && ||
-> == != <= >= += -= *= /= %=
&= |= ^= << <<= =>
>>
>>=
