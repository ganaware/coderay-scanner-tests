comment(// https://msdn.microsoft.com/en-us/library/vstudio/5011f09h.aspx)

predefined_type(bool) ident(condition) operator(=) predefined_constant(true)operator(;)

keyword(if) operator(()ident(condition)operator(\))
operator({)
    ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(The variable is set to true.)delimiter(")>operator(\);)
operator(})
keyword(else)
operator({)
    ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(The variable is set to false.)delimiter(")>operator(\);)
operator(})

comment(// if-else statement)
keyword(if) operator(()ident(condition)operator(\))
operator({)
    ident(then)operator(-)ident(statement)operator(;)
operator(})
keyword(else)
operator({)
    keyword(else)operator(-)ident(statement)operator(;)
operator(})
comment(// Next statement in the program.)


comment(// if statement without an else)
keyword(if) operator(()ident(condition)operator(\))
operator({)
    ident(then)operator(-)ident(statement)operator(;)
operator(})
comment(// Next statement in the program.)

comment(// Try with m = 12 and then with m = 8. )
predefined_type(int) ident(m) operator(=) integer(12)operator(;)
predefined_type(int) ident(n) operator(=) integer(18)operator(;)

keyword(if) operator(()ident(m) operator(>) integer(10)operator(\))
    keyword(if) operator(()ident(n) operator(>) integer(20)operator(\))
    operator({)
        ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(Result1)delimiter(")>operator(\);)
    operator(})
    keyword(else)
    operator({)
        ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(Result2)delimiter(")>operator(\);)
    operator(})

comment(// Try with m = 12 and then with m = 8. )
keyword(if) operator(()ident(m) operator(>) integer(10)operator(\))
operator({)
    keyword(if) operator(()ident(n) operator(>) integer(20)operator(\))
        ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(Result1)delimiter(")>operator(\);)
operator(})
keyword(else)
operator({)
    ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(Result2)delimiter(")>operator(\);)
operator(})

ident(Console)operator(.)ident(Write)operator(()string<delimiter(")content(Enter a character: )delimiter(")>operator(\);)
predefined_type(char) ident(c) operator(=) operator(()predefined_type(char)operator(\))ident(Console)operator(.)ident(Read)operator((\);)
keyword(if) operator(()ident(Char)operator(.)ident(IsLetter)operator(()ident(c)operator(\)\))
operator({)
    keyword(if) operator(()ident(Char)operator(.)ident(IsLower)operator(()ident(c)operator(\)\))
    operator({)
        ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(The character is lowercase.)delimiter(")>operator(\);)
    operator(})
    keyword(else)
    operator({)
        ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(The character is uppercase.)delimiter(")>operator(\);)
    operator(})
operator(})
keyword(else)
operator({)
    ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(The character isn't an alphabetic character.)delimiter(")>operator(\);)
operator(})

comment(//Sample Output: )

comment(//Enter a character: 2 )
comment(//The character isn't an alphabetic character. )

comment(//Enter a character: A )
comment(//The character is uppercase. )

comment(//Enter a character: h )
comment(//The character is lowercase.)

comment(// Change the values of these variables to test the results. )
predefined_type(bool) ident(Condition1) operator(=) predefined_constant(true)operator(;)
predefined_type(bool) ident(Condition2) operator(=) predefined_constant(true)operator(;)
predefined_type(bool) ident(Condition3) operator(=) predefined_constant(true)operator(;)
predefined_type(bool) ident(Condition4) operator(=) predefined_constant(true)operator(;)

keyword(if) operator(()ident(Condition1)operator(\))
operator({)
    comment(// Condition1 is true.)
operator(})
keyword(else) keyword(if) operator(()ident(Condition2)operator(\))
operator({)
    comment(// Condition1 is false and Condition2 is true.)
operator(})
keyword(else) keyword(if) operator(()ident(Condition3)operator(\))
operator({)
    keyword(if) operator(()ident(Condition4)operator(\))
    operator({)
        comment(// Condition1 and Condition2 are false. Condition3 and Condition4 are true.)
    operator(})
    keyword(else)
    operator({)
        comment(// Condition1, Condition2, and Condition4 are false. Condition3 is true.)
    operator(})
operator(})
keyword(else)
operator({)
    comment(// Condition1, Condition2, and Condition3 are false.)
operator(})

ident(Console)operator(.)ident(Write)operator(()string<delimiter(")content(Enter a character: )delimiter(")>operator(\);)
predefined_type(char) ident(ch) operator(=) operator(()predefined_type(char)operator(\))ident(Console)operator(.)ident(Read)operator((\);)

keyword(if) operator(()ident(Char)operator(.)ident(IsUpper)operator(()ident(ch)operator(\)\))
operator({)
    ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(The character is an uppercase letter.)delimiter(")>operator(\);)
operator(})
keyword(else) keyword(if) operator(()ident(Char)operator(.)ident(IsLower)operator(()ident(ch)operator(\)\))
operator({)
    ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(The character is a lowercase letter.)delimiter(")>operator(\);)
operator(})
keyword(else) keyword(if) operator(()ident(Char)operator(.)ident(IsDigit)operator(()ident(ch)operator(\)\))
operator({)
    ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(The character is a number.)delimiter(")>operator(\);)
operator(})
keyword(else)
operator({)
    ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(The character is not alphanumeric.)delimiter(")>operator(\);)
operator(})

comment(//Sample Input and Output: )
comment(//Enter a character: E )
comment(//The character is an uppercase letter. )

comment(//Enter a character: e )
comment(//The character is a lowercase letter. )

comment(//Enter a character: 4 )
comment(//The character is a number. )

comment(//Enter a character: = )
comment(//The character is not alphanumeric.)

comment(// NOT)
predefined_type(bool) ident(result) operator(=) predefined_constant(true)operator(;)
keyword(if) operator((!)ident(result)operator(\))
operator({)
    ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(The condition is true (result is false\).)delimiter(")>operator(\);)
operator(})
keyword(else)
operator({)
    ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(The condition is false (result is true\).)delimiter(")>operator(\);)
operator(})

comment(// Short-circuit AND)
predefined_type(int) ident(m) operator(=) integer(9)operator(;)
predefined_type(int) ident(n) operator(=) integer(7)operator(;)
predefined_type(int) ident(p) operator(=) integer(5)operator(;)
keyword(if) operator(()ident(m) operator(>=) ident(n) operator(&&) ident(m) operator(>=) ident(p)operator(\))
operator({)
    ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(Nothing is larger than m.)delimiter(")>operator(\);)
operator(})

comment(// AND and NOT)
keyword(if) operator(()ident(m) operator(>=) ident(n) operator(&&) operator(!()ident(p) operator(>) ident(m)operator(\)\))
operator({)
    ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(Nothing is larger than m.)delimiter(")>operator(\);)
operator(})

comment(// Short-circuit OR)
keyword(if) operator(()ident(m) operator(>) ident(n) operator(||) ident(m) operator(>) ident(p)operator(\))
operator({)
    ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(m isn't the smallest.)delimiter(")>operator(\);)
operator(})

comment(// NOT and OR)
ident(m) operator(=) integer(4)operator(;)
keyword(if) operator((!()ident(m) operator(>=) ident(n) operator(||) ident(m) operator(>=) ident(p)operator(\)\))
operator({)
    ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(Now m is the smallest.)delimiter(")>operator(\);)
operator(})
comment(// Output:)
comment(// The condition is false (result is true\).)
comment(// Nothing is larger than m.)
comment(// Nothing is larger than m.)
comment(// m isn't the smallest.)
comment(// Now m is the smallest.)
