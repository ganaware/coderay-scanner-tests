comment(// https://msdn.microsoft.com/en-us/library/vstudio/ttw7t8t6.aspx)

keyword(class) class(ForEachTest)
operator({)
    directive(static) directive(void) ident(Main)operator(()predefined_type(string)operator([]) ident(args)operator(\))
    operator({)
        predefined_type(int)operator([]) ident(fibarray) operator(=) keyword(new) predefined_type(int)operator([]) operator({) integer(0)operator(,) integer(1)operator(,) integer(1)operator(,) integer(2)operator(,) integer(3)operator(,) integer(5)operator(,) integer(8)operator(,) integer(13) operator(};)
        keyword(foreach) operator(()predefined_type(int) ident(element) keyword(in) ident(fibarray)operator(\))
        operator({)
            ident(System)operator(.)ident(Console)operator(.)ident(WriteLine)operator(()ident(element)operator(\);)
        operator(})
        ident(System)operator(.)ident(Console)operator(.)ident(WriteLine)operator((\);)


        comment(// Compare the previous loop to a similar for loop. )
        keyword(for) operator(()predefined_type(int) ident(i) operator(=) integer(0)operator(;) ident(i) operator(<) ident(fibarray)operator(.)ident(Length)operator(;) ident(i)operator(++\))
        operator({)
            ident(System)operator(.)ident(Console)operator(.)ident(WriteLine)operator(()ident(fibarray)operator([)ident(i)operator(]\);)
        operator(})
        ident(System)operator(.)ident(Console)operator(.)ident(WriteLine)operator((\);)


        comment(// You can maintain a count of the elements in the collection. )
        predefined_type(int) ident(count) operator(=) integer(0)operator(;)
        keyword(foreach) operator(()predefined_type(int) ident(element) keyword(in) ident(fibarray)operator(\))
        operator({)
            ident(count) operator(+=) integer(1)operator(;)
            ident(System)operator(.)ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(Element #{0}: {1})delimiter(")>operator(,) ident(count)operator(,) ident(element)operator(\);)
        operator(})
        ident(System)operator(.)ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(Number of elements in the array: {0})delimiter(")>operator(,) ident(count)operator(\);)
    operator(})
    comment(// Output: )
    comment(// 0 )
    comment(// 1 )
    comment(// 1 )
    comment(// 2 )
    comment(// 3 )
    comment(// 5 )
    comment(// 8 )
    comment(// 13 )

    comment(// 0 )
    comment(// 1 )
    comment(// 1 )
    comment(// 2 )
    comment(// 3 )
    comment(// 5 )
    comment(// 8 )
    comment(// 13 )

    comment(// Element #1: 0 )
    comment(// Element #2: 1 )
    comment(// Element #3: 1 )
    comment(// Element #4: 2 )
    comment(// Element #5: 3 )
    comment(// Element #6: 5 )
    comment(// Element #7: 8 )
    comment(// Element #8: 13 )
    comment(// Number of elements in the array: 8)
operator(})
