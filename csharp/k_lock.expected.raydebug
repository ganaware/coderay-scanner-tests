comment(// https://msdn.microsoft.com/en-us/library/vstudio/c5kehkcz.aspx)

keyword(class) class(Account)
operator({)
    predefined_type(decimal) ident(balance)operator(;)
    directive(private) ident(Object) ident(thisLock) operator(=) keyword(new) ident(Object)operator((\);)

    directive(public) directive(void) ident(Withdraw)operator(()predefined_type(decimal) ident(amount)operator(\))
    operator({)
        keyword(lock) operator(()ident(thisLock)operator(\))
        operator({)
            keyword(if) operator(()ident(amount) operator(>) ident(balance)operator(\))
            operator({)
                keyword(throw) keyword(new) ident(Exception)operator(()string<delimiter(")content(Insufficient funds)delimiter(")>operator(\);)
            operator(})
            ident(balance) operator(-=) ident(amount)operator(;)
        operator(})
    operator(})
operator(})

comment(//using System.Threading; )

keyword(class) class(ThreadTest)
operator({)
    directive(public) directive(void) ident(RunMe)operator((\))
    operator({)
        ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(RunMe called)delimiter(")>operator(\);)
    operator(})

    directive(static) directive(void) ident(Main)operator((\))
    operator({)
        ident(ThreadTest) ident(b) operator(=) keyword(new) ident(ThreadTest)operator((\);)
        ident(Thread) ident(t) operator(=) keyword(new) ident(Thread)operator(()ident(b)operator(.)ident(RunMe)operator(\);)
        ident(t)operator(.)ident(Start)operator((\);)
    operator(})
operator(})
comment(// Output: RunMe called)

comment(// using System.Threading; )

keyword(class) class(Account)
operator({)
    directive(private) ident(Object) ident(thisLock) operator(=) keyword(new) ident(Object)operator((\);)
    predefined_type(int) ident(balance)operator(;)

    ident(Random) ident(r) operator(=) keyword(new) ident(Random)operator((\);)

    directive(public) ident(Account)operator(()predefined_type(int) ident(initial)operator(\))
    operator({)
        ident(balance) operator(=) ident(initial)operator(;)
    operator(})

    predefined_type(int) ident(Withdraw)operator(()predefined_type(int) ident(amount)operator(\))
    operator({)

        comment(// This condition never is true unless the lock statement )
        comment(// is commented out. )
        keyword(if) operator(()ident(balance) operator(<) integer(0)operator(\))
        operator({)
            keyword(throw) keyword(new) ident(Exception)operator(()string<delimiter(")content(Negative Balance)delimiter(")>operator(\);)
        operator(})

        comment(// Comment out the next line to see the effect of leaving out  )
        comment(// the lock keyword. )
        keyword(lock) operator(()ident(thisLock)operator(\))
        operator({)
            keyword(if) operator(()ident(balance) operator(>=) ident(amount)operator(\))
            operator({)
                ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(Balance before Withdrawal :  )delimiter(")> operator(+) ident(balance)operator(\);)
                ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(Amount to Withdraw        : -)delimiter(")> operator(+) ident(amount)operator(\);)
                ident(balance) operator(=) ident(balance) operator(-) ident(amount)operator(;)
                ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(Balance after Withdrawal  :  )delimiter(")> operator(+) ident(balance)operator(\);)
                keyword(return) ident(amount)operator(;)
            operator(})
            keyword(else)
            operator({)
                keyword(return) integer(0)operator(;) comment(// transaction rejected)
            operator(})
        operator(})
    operator(})

    directive(public) directive(void) ident(DoTransactions)operator((\))
    operator({)
        keyword(for) operator(()predefined_type(int) ident(i) operator(=) integer(0)operator(;) ident(i) operator(<) integer(100)operator(;) ident(i)operator(++\))
        operator({)
            ident(Withdraw)operator(()ident(r)operator(.)ident(Next)operator(()integer(1)operator(,) integer(100)operator(\)\);)
        operator(})
    operator(})
operator(})

keyword(class) class(Test)
operator({)
    directive(static) directive(void) ident(Main)operator((\))
    operator({)
        ident(Thread)operator([]) ident(threads) operator(=) keyword(new) ident(Thread)operator([)integer(10)operator(];)
        ident(Account) ident(acc) operator(=) keyword(new) ident(Account)operator(()integer(1000)operator(\);)
        keyword(for) operator(()predefined_type(int) ident(i) operator(=) integer(0)operator(;) ident(i) operator(<) integer(10)operator(;) ident(i)operator(++\))
        operator({)
            ident(Thread) ident(t) operator(=) keyword(new) ident(Thread)operator(()keyword(new) ident(ThreadStart)operator(()ident(acc)operator(.)ident(DoTransactions)operator(\)\);)
            ident(threads)operator([)ident(i)operator(]) operator(=) ident(t)operator(;)
        operator(})
        keyword(for) operator(()predefined_type(int) ident(i) operator(=) integer(0)operator(;) ident(i) operator(<) integer(10)operator(;) ident(i)operator(++\))
        operator({)
            ident(threads)operator([)ident(i)operator(])operator(.)ident(Start)operator((\);)
        operator(})
    operator(})
operator(})
