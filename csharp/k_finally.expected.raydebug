comment(// https://msdn.microsoft.com/en-us/library/vstudio/zwc8s4fz.aspx)

directive(public) keyword(class) class(ThrowTestA)
operator({)
    directive(static) directive(void) ident(Main)operator((\))
    operator({)
        predefined_type(int) ident(i) operator(=) integer(123)operator(;)
        predefined_type(string) ident(s) operator(=) string<delimiter(")content(Some string)delimiter(")>operator(;)
        predefined_type(object) ident(obj) operator(=) ident(s)operator(;)

        keyword(try)
        operator({)
            comment(// Invalid conversion; obj contains a string, not a numeric type.)
            ident(i) operator(=) operator(()predefined_type(int)operator(\))ident(obj)operator(;)

            comment(// The following statement is not run.)
            ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(WriteLine at the end of the try block.)delimiter(")>operator(\);)
        operator(})
        keyword(finally)
        operator({)
            comment(// To run the program in Visual Studio, type CTRL+F5. Then  )
            comment(// click Cancel in the error dialog.)
            ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")char(\\n)content(Execution of the finally block after an unhandled)char(\\n)delimiter(")> operator(+)
                string<delimiter(")content(error depends on how the exception unwind operation is triggered.)delimiter(")>operator(\);)
            ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(i = {0})delimiter(")>operator(,) ident(i)operator(\);)
        operator(})
    operator(})
    comment(// Output: )
    comment(// Unhandled Exception: System.InvalidCastException: Specified cast is not valid. )
    comment(// )
    comment(// Execution of the finally block after an unhandled )
    comment(// error depends on how the exception unwind operation is triggered. )
    comment(// i = 123)
operator(})

directive(public) keyword(class) class(ThrowTestB)
operator({)
    directive(static) directive(void) ident(Main)operator((\))
    operator({)
        keyword(try)
        operator({)
            comment(// TryCast produces an unhandled exception.)
            ident(TryCast)operator((\);)
        operator(})
        keyword(catch) operator(()ident(Exception) ident(ex)operator(\))
        operator({)
            comment(// Catch the exception that is unhandled in TryCast.)
            ident(Console)operator(.)ident(WriteLine)
                operator(()string<delimiter(")content(Catching the {0} exception triggers the finally block.)delimiter(")>operator(,)
                ident(ex)operator(.)ident(GetType)operator((\)\);)

            comment(// Restore the original unhandled exception. You might not )
            comment(// know what exception to expect, or how to handle it, so pass  )
            comment(// it on. )
            keyword(throw)operator(;)
        operator(})
    operator(})

    directive(public) directive(static) directive(void) ident(TryCast)operator((\))
    operator({)
        predefined_type(int) ident(i) operator(=) integer(123)operator(;)
        predefined_type(string) ident(s) operator(=) string<delimiter(")content(Some string)delimiter(")>operator(;)
        predefined_type(object) ident(obj) operator(=) ident(s)operator(;)

        keyword(try)
        operator({)
            comment(// Invalid conversion; obj contains a string, not a numeric type.)
            ident(i) operator(=) operator(()predefined_type(int)operator(\))ident(obj)operator(;)

            comment(// The following statement is not run.)
            ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(WriteLine at the end of the try block.)delimiter(")>operator(\);)
        operator(})
        keyword(finally)
        operator({)
            comment(// Report that the finally block is run, and show that the value of )
            comment(// i has not been changed.)
            ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")char(\\n)content(In the finally block in TryCast, i = {0}.)char(\\n)delimiter(")>operator(,) ident(i)operator(\);)
        operator(})
    operator(})
    comment(// Output: )
    comment(// In the finally block in TryCast, i = 123. )

    comment(// Catching the System.InvalidCastException exception triggers the finally block. )

    comment(// Unhandled Exception: System.InvalidCastException: Specified cast is not valid.)
operator(})

