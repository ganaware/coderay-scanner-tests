comment(// https://msdn.microsoft.com/en-us/library/vstudio/06tc147t.aspx)

predefined_type(int) ident(caseSwitch) operator(=) integer(1)operator(;)
keyword(switch) operator(()ident(caseSwitch)operator(\))
operator({)
    keyword(case) integer(1)operator(:)
        ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(Case 1)delimiter(")>operator(\);)
        keyword(break)operator(;)
    keyword(case) integer(2)operator(:)
        ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(Case 2)delimiter(")>operator(\);)
        keyword(break)operator(;)
    keyword(default)operator(:)
        ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(Default case)delimiter(")>operator(\);)
        keyword(break)operator(;)
operator(})

keyword(switch) operator(()ident(caseSwitch)operator(\))
operator({)
    comment(// The following switch section causes an error.)
    keyword(case) integer(1)operator(:)
        ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(Case 1...)delimiter(")>operator(\);)
        comment(// Add a break or other jump statement here.)
    keyword(case) integer(2)operator(:)
        ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(... and/or Case 2)delimiter(")>operator(\);)
        keyword(break)operator(;)
operator(})

keyword(case) integer(4)operator(:)
    keyword(while) operator(()predefined_constant(true)operator(\))
        ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(Endless looping. . . .)delimiter(")>operator(\);)

keyword(class) class(Program)
operator({)
    directive(static) directive(void) ident(Main)operator(()predefined_type(string)operator([]) ident(args)operator(\))
    operator({)
        predefined_type(int) ident(switchExpression) operator(=) integer(3)operator(;)
        keyword(switch) operator(()ident(switchExpression)operator(\))
        operator({)
            comment(// A switch section can have more than one case label. )
            keyword(case) integer(0)operator(:)
            keyword(case) integer(1)operator(:)
                ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(Case 0 or 1)delimiter(")>operator(\);)
                comment(// Most switch sections contain a jump statement, such as )
                comment(// a break, goto, or return. The end of the statement list )
                comment(// must be unreachable. )
                keyword(break)operator(;)
            keyword(case) integer(2)operator(:)
                ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(Case 2)delimiter(")>operator(\);)
                keyword(break)operator(;)
                comment(// The following line causes a warning.)
                ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(Unreachable code)delimiter(")>operator(\);)
            comment(// 7 - 4 in the following line evaluates to 3. )
            keyword(case) integer(7) operator(-) integer(4)operator(:)
                ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(Case 3)delimiter(")>operator(\);)
                keyword(break)operator(;)
            comment(// If the value of switchExpression is not 0, 1, 2, or 3, the )
            comment(// default case is executed. )
            keyword(default)operator(:)
                ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(Default case (optional\))delimiter(")>operator(\);)
                comment(// You cannot "fall through" any switch section, including)
                comment(// the last one. )
                keyword(break)operator(;)
        operator(})
    operator(})
operator(})

keyword(class) class(SwitchTest)
operator({)
    directive(static) directive(void) ident(Main)operator((\))
    operator({)
        ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(Coffee sizes: 1=small 2=medium 3=large)delimiter(")>operator(\);)
        ident(Console)operator(.)ident(Write)operator(()string<delimiter(")content(Please enter your selection: )delimiter(")>operator(\);)
        predefined_type(string) ident(str) operator(=) ident(Console)operator(.)ident(ReadLine)operator((\);)
        predefined_type(int) ident(cost) operator(=) integer(0)operator(;)

        comment(// Notice the goto statements in cases 2 and 3. The base cost of 25 )
        comment(// cents is added to the additional cost for the medium and large sizes. )
        keyword(switch) operator(()ident(str)operator(\))
        operator({)
            keyword(case) string<delimiter(")content(1)delimiter(")>operator(:)
            keyword(case) string<delimiter(")content(small)delimiter(")>operator(:)
                ident(cost) operator(+=) integer(25)operator(;)
                keyword(break)operator(;)
            keyword(case) string<delimiter(")content(2)delimiter(")>operator(:)
            keyword(case) string<delimiter(")content(medium)delimiter(")>operator(:)
                ident(cost) operator(+=) integer(25)operator(;)
                keyword(goto) keyword(case) string<delimiter(")content(1)delimiter(")>operator(;)
            keyword(case) string<delimiter(")content(3)delimiter(")>operator(:)
            keyword(case) string<delimiter(")content(large)delimiter(")>operator(:)
                ident(cost) operator(+=) integer(50)operator(;)
                keyword(goto) keyword(case) string<delimiter(")content(1)delimiter(")>operator(;)
            keyword(default)operator(:)
                ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(Invalid selection. Please select 1, 2, or 3.)delimiter(")>operator(\);)
                keyword(break)operator(;)
        operator(})
        keyword(if) operator(()ident(cost) operator(!=) integer(0)operator(\))
        operator({)
            ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(Please insert {0} cents.)delimiter(")>operator(,) ident(cost)operator(\);)
        operator(})
        ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(Thank you for your business.)delimiter(")>operator(\);)
    operator(})
operator(})
comment(/*
    Sample Input: 2

    Sample Output:
    Coffee sizes: 1=small 2=medium 3=large
    Please enter your selection: 2
    Please insert 50 cents.
    Thank you for your business.
*/)
