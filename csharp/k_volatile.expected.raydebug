comment(// https://msdn.microsoft.com/en-us/library/vstudio/x13ttww7.aspx)

keyword(class) class(VolatileTest)
operator({)
    directive(public) directive(volatile) predefined_type(int) ident(i)operator(;)

    directive(public) directive(void) ident(Test)operator(()predefined_type(int) ident(_i)operator(\))
    operator({)
        ident(i) operator(=) ident(_i)operator(;)
    operator(})
operator(})

keyword(using) ident(System)operator(;)
keyword(using) ident(System)operator(.)ident(Threading)operator(;)

directive(public) keyword(class) class(Worker)
operator({)
    comment(// This method is called when the thread is started. )
    directive(public) directive(void) ident(DoWork)operator((\))
    operator({)
        keyword(while) operator((!)ident(_shouldStop)operator(\))
        operator({)
            ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(Worker thread: working...)delimiter(")>operator(\);)
        operator(})
        ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(Worker thread: terminating gracefully.)delimiter(")>operator(\);)
    operator(})
    directive(public) directive(void) ident(RequestStop)operator((\))
    operator({)
        ident(_shouldStop) operator(=) predefined_constant(true)operator(;)
    operator(})
    comment(// Keyword volatile is used as a hint to the compiler that this data )
    comment(// member is accessed by multiple threads. )
    directive(private) directive(volatile) predefined_type(bool) ident(_shouldStop)operator(;)
operator(})

directive(public) keyword(class) class(WorkerThreadExample)
operator({)
    directive(static) directive(void) ident(Main)operator((\))
    operator({)
        comment(// Create the worker thread object. This does not start the thread.)
        ident(Worker) ident(workerObject) operator(=) keyword(new) ident(Worker)operator((\);)
        ident(Thread) ident(workerThread) operator(=) keyword(new) ident(Thread)operator(()ident(workerObject)operator(.)ident(DoWork)operator(\);)

        comment(// Start the worker thread.)
        ident(workerThread)operator(.)ident(Start)operator((\);)
        ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(Main thread: starting worker thread...)delimiter(")>operator(\);)

        comment(// Loop until the worker thread activates. )
        keyword(while) operator((!)ident(workerThread)operator(.)ident(IsAlive)operator(\)) operator(;)

        comment(// Put the main thread to sleep for 1 millisecond to )
        comment(// allow the worker thread to do some work.)
        ident(Thread)operator(.)ident(Sleep)operator(()integer(1)operator(\);)

        comment(// Request that the worker thread stop itself.)
        ident(workerObject)operator(.)ident(RequestStop)operator((\);)

        comment(// Use the Thread.Join method to block the current thread  )
        comment(// until the object's thread terminates.)
        ident(workerThread)operator(.)ident(Join)operator((\);)
        ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(Main thread: worker thread has terminated.)delimiter(")>operator(\);)
    operator(})
    comment(// Sample output: )
    comment(// Main thread: starting worker thread... )
    comment(// Worker thread: working... )
    comment(// Worker thread: working... )
    comment(// Worker thread: working... )
    comment(// Worker thread: working... )
    comment(// Worker thread: working... )
    comment(// Worker thread: working... )
    comment(// Worker thread: terminating gracefully. )
    comment(// Main thread: worker thread has terminated.)
operator(})
