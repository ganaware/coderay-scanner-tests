comment(// https://msdn.microsoft.com/en-us/library/vstudio/xhbhezf4.aspx)

comment(// Must be defined inside a class called Fahrenheit: )
directive(public) directive(static) directive(explicit) keyword(operator) ident(Celsius)operator(()ident(Fahrenheit) ident(fahr)operator(\))
operator({)
    keyword(return) keyword(new) ident(Celsius)operator((()float(5.0f) operator(/) float(9.0f)operator(\)) operator(*) operator(()ident(fahr)operator(.)ident(degrees) operator(-) integer(32)operator(\)\);)
operator(})

keyword(class) class(Celsius)
operator({)
    directive(public) ident(Celsius)operator(()predefined_type(float) ident(temp)operator(\))
    operator({)
        ident(degrees) operator(=) ident(temp)operator(;)
    operator(})
    directive(public) directive(static) directive(explicit) keyword(operator) ident(Fahrenheit)operator(()ident(Celsius) ident(c)operator(\))
    operator({)
        keyword(return) keyword(new) ident(Fahrenheit)operator((()float(9.0f) operator(/) float(5.0f)operator(\)) operator(*) ident(c)operator(.)ident(degrees) operator(+) integer(32)operator(\);)
    operator(})
    directive(public) predefined_type(float) ident(Degrees)
    operator({)
        keyword(get) operator({) keyword(return) ident(degrees)operator(;) operator(})
    operator(})
    directive(private) predefined_type(float) ident(degrees)operator(;)
operator(})

keyword(class) class(Fahrenheit)
operator({)
    directive(public) ident(Fahrenheit)operator(()predefined_type(float) ident(temp)operator(\))
    operator({)
        ident(degrees) operator(=) ident(temp)operator(;)
    operator(})
    comment(// Must be defined inside a class called Fahrenheit: )
    directive(public) directive(static) directive(explicit) keyword(operator) ident(Celsius)operator(()ident(Fahrenheit) ident(fahr)operator(\))
    operator({)
        keyword(return) keyword(new) ident(Celsius)operator((()float(5.0f) operator(/) float(9.0f)operator(\)) operator(*) operator(()ident(fahr)operator(.)ident(degrees) operator(-) integer(32)operator(\)\);)
    operator(})
    directive(public) predefined_type(float) ident(Degrees)
    operator({)
        keyword(get) operator({) keyword(return) ident(degrees)operator(;) operator(})
    operator(})
    directive(private) predefined_type(float) ident(degrees)operator(;)
operator(})

keyword(class) class(MainClass)
operator({)
    directive(static) directive(void) ident(Main)operator((\))
    operator({)
        ident(Fahrenheit) ident(fahr) operator(=) keyword(new) ident(Fahrenheit)operator(()float(100.0f)operator(\);)
        ident(Console)operator(.)ident(Write)operator(()string<delimiter(")content({0} Fahrenheit)delimiter(")>operator(,) ident(fahr)operator(.)ident(Degrees)operator(\);)
        ident(Celsius) ident(c) operator(=) operator(()ident(Celsius)operator(\))ident(fahr)operator(;)

        ident(Console)operator(.)ident(Write)operator(()string<delimiter(")content( = {0} Celsius)delimiter(")>operator(,) ident(c)operator(.)ident(Degrees)operator(\);)
        ident(Fahrenheit) ident(fahr2) operator(=) operator(()ident(Fahrenheit)operator(\))ident(c)operator(;)
        ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content( = {0} Fahrenheit)delimiter(")>operator(,) ident(fahr2)operator(.)ident(Degrees)operator(\);)
    operator(})
operator(})
comment(// Output: )
comment(// 100 Fahrenheit = 37.77778 Celsius = 100 Fahrenheit)

keyword(struct) class(Digit)
operator({)
    predefined_type(byte) keyword(value)operator(;)
    directive(public) ident(Digit)operator(()predefined_type(byte) keyword(value)operator(\))
    operator({)
        keyword(if) operator(()keyword(value) operator(>) integer(9)operator(\))
        operator({)
            keyword(throw) keyword(new) ident(ArgumentException)operator((\);)
        operator(})
        local_variable(this)operator(.)keyword(value) operator(=) keyword(value)operator(;)
    operator(})

    comment(// Define explicit byte-to-Digit conversion operator: )
    directive(public) directive(static) directive(explicit) keyword(operator) ident(Digit)operator(()predefined_type(byte) ident(b)operator(\))
    operator({)
        ident(Digit) ident(d) operator(=) keyword(new) ident(Digit)operator(()ident(b)operator(\);)
        ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(conversion occurred)delimiter(")>operator(\);)
        keyword(return) ident(d)operator(;)
    operator(})
operator(})

keyword(class) class(ExplicitTest)
operator({)
    directive(static) directive(void) ident(Main)operator((\))
    operator({)
        keyword(try)
        operator({)
            predefined_type(byte) ident(b) operator(=) integer(3)operator(;)
            ident(Digit) ident(d) operator(=) operator(()ident(Digit)operator(\))ident(b)operator(;) comment(// explicit conversion)
        operator(})
        keyword(catch) operator(()ident(Exception) ident(e)operator(\))
        operator({)
            ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content({0} Exception caught.)delimiter(")>operator(,) ident(e)operator(\);)
        operator(})
    operator(})
operator(})
comment(/*
Output:
conversion occurred
*/)
