comment(// single line comment)

comment(// multi line comment)
comment(/*
multi line comment
*/)

comment(// preprocessor comment)
comment(#if false
...
#endif)

comment(// $)
error($)operator(;)

comment(// keywords)
directive(abstract)operator(;)
keyword(as)operator(;)
local_variable(base)operator(;)
predefined_type(bool)operator(;)
keyword(break)operator(;)
predefined_type(byte)operator(;)
keyword(case)operator(;)
keyword(catch)operator(;)
predefined_type(char)operator(;)
directive(checked)operator(;)
keyword(class)error(;)
keyword(const)operator(;)
keyword(continue)operator(;)
predefined_type(decimal)operator(;)
keyword(default)operator(;)
keyword(delegate)operator(;)
keyword(do)operator(;)
predefined_type(double)operator(;)
keyword(else)operator(;)
keyword(enum)operator(;)
keyword(event)operator(;)
directive(explicit)operator(;)
directive(extern)operator(;)
predefined_constant(false)operator(;)
keyword(finally)operator(;)
directive(fixed)operator(;)
predefined_type(float)operator(;)
keyword(for)operator(;)
keyword(foreach)operator(;)
keyword(goto)operator(;)
keyword(if)operator(;)
directive(implicit)operator(;)
keyword(in)operator(;)
predefined_type(int)operator(;)
keyword(interface)error(;)
directive(internal)operator(;)
keyword(is)operator(;)
keyword(lock)operator(;)
predefined_type(long)operator(;)
keyword(namespace)operator(;)
keyword(new)operator(;)
predefined_constant(null)operator(;)
predefined_type(object)operator(;)
keyword(operator)operator(;)
keyword(out)operator(;)
directive(override)operator(;)
keyword(params)operator(;)
directive(private)operator(;)
directive(protected)operator(;)
directive(public)operator(;)
keyword(readonly)operator(;)
keyword(ref)operator(;)
keyword(return)operator(;)
predefined_type(sbyte)operator(;)
directive(sealed)operator(;)
predefined_type(short)operator(;)
keyword(sizeof)operator(;)
keyword(stackalloc)operator(;)
directive(static)operator(;)
predefined_type(string)operator(;)
keyword(struct)error(;)
keyword(switch)operator(;)
local_variable(this)operator(;)
keyword(throw)operator(;)
predefined_constant(true)operator(;)
keyword(try)operator(;)
keyword(typeof)operator(;)
predefined_type(uint)operator(;)
predefined_type(ulong)operator(;)
directive(unchecked)operator(;)
directive(unsafe)operator(;)
predefined_type(ushort)operator(;)
keyword(using)operator(;)
directive(virtual)operator(;)
directive(void)operator(;)
directive(volatile)operator(;)
keyword(while)operator(;)
comment(// contextual keywords)
keyword(add)operator(;)
keyword(alias)operator(;)
keyword(ascending)operator(;)
keyword(async)operator(;)
keyword(await)operator(;)
keyword(descending)operator(;)
keyword(dynamic)operator(;)
keyword(from)operator(;)
keyword(get)operator(;)
keyword(global)operator(;)
keyword(group)operator(;)
keyword(into)operator(;)
keyword(join)operator(;)
keyword(let)operator(;)
keyword(orderby)operator(;)
keyword(partial)operator(;)
keyword(remove)operator(;)
keyword(select)operator(;)
keyword(set)operator(;)
keyword(value)operator(;)
keyword(var)operator(;)
keyword(where)operator(;)
keyword(yield)operator(;)
comment(// identifier)
ident(@abstract)operator(;)
ident(@as)operator(;)
ident(@base)operator(;)
ident(@bool)operator(;)
ident(@break)operator(;)
ident(@byte)operator(;)
ident(@case)operator(;)
ident(@catch)operator(;)
ident(@char)operator(;)
ident(@checked)operator(;)
ident(@class)operator(;)
ident(@const)operator(;)
ident(@continue)operator(;)
ident(@decimal)operator(;)
ident(@default)operator(;)
ident(@delegate)operator(;)
ident(@do)operator(;)
ident(@double)operator(;)
ident(@else)operator(;)
ident(@enum)operator(;)
ident(@event)operator(;)
ident(@explicit)operator(;)
ident(@extern)operator(;)
ident(@false)operator(;)
ident(@finally)operator(;)
ident(@fixed)operator(;)
ident(@float)operator(;)
ident(@for)operator(;)
ident(@foreach)operator(;)
ident(@goto)operator(;)
ident(@if)operator(;)
ident(@implicit)operator(;)
ident(@in)operator(;)
ident(@int)operator(;)
ident(@interface)operator(;)
ident(@internal)operator(;)
ident(@is)operator(;)
ident(@lock)operator(;)
ident(@long)operator(;)
ident(@namespace)operator(;)
ident(@new)operator(;)
ident(@null)operator(;)
ident(@object)operator(;)
ident(@operator)operator(;)
ident(@out)operator(;)
ident(@override)operator(;)
ident(@params)operator(;)
ident(@private)operator(;)
ident(@protected)operator(;)
ident(@public)operator(;)
ident(@readonly)operator(;)
ident(@ref)operator(;)
ident(@return)operator(;)
ident(@sbyte)operator(;)
ident(@sealed)operator(;)
ident(@short)operator(;)
ident(@sizeof)operator(;)
ident(@stackalloc)operator(;)
ident(@static)operator(;)
ident(@string)operator(;)
ident(@struct)operator(;)
ident(@switch)operator(;)
ident(@this)operator(;)
ident(@throw)operator(;)
ident(@true)operator(;)
ident(@try)operator(;)
ident(@typeof)operator(;)
ident(@uint)operator(;)
ident(@ulong)operator(;)
ident(@unchecked)operator(;)
ident(@unsafe)operator(;)
ident(@ushort)operator(;)
ident(@using)operator(;)
ident(@virtual)operator(;)
ident(@void)operator(;)
ident(@volatile)operator(;)
ident(@while)operator(;)
ident(@add)operator(;)
ident(@alias)operator(;)
ident(@ascending)operator(;)
ident(@async)operator(;)
ident(@await)operator(;)
ident(@descending)operator(;)
ident(@dynamic)operator(;)
ident(@from)operator(;)
ident(@get)operator(;)
ident(@global)operator(;)
ident(@group)operator(;)
ident(@into)operator(;)
ident(@join)operator(;)
ident(@let)operator(;)
ident(@orderby)operator(;)
ident(@partial)operator(;)
ident(@remove)operator(;)
ident(@select)operator(;)
ident(@set)operator(;)
ident(@value)operator(;)
ident(@var)operator(;)
ident(@where)operator(;)
ident(@yield)operator(;)

comment(// B.1.8 Literals)

comment(// boolean-literal:)
predefined_constant(true)operator(;)
predefined_constant(false)operator(;)

comment(// integer-literal:)
comment(//   decimal-integer-literal)
integer(0123456789)operator(;)
integer(0123456789U)operator(;)
integer(0123456789u)operator(;)
integer(0123456789L)operator(;)
integer(0123456789l)operator(;)
integer(0123456789UL)operator(;)
integer(0123456789Ul)operator(;)
integer(0123456789uL)operator(;)
integer(0123456789ul)operator(;)
integer(0123456789LU)operator(;)
integer(0123456789Lu)operator(;)
integer(0123456789lU)operator(;)
integer(0123456789lu)operator(;)
comment(//   hexadecimal-integer-literal)
hex(0x0123456789ABCDEFabcdef)operator(;)
hex(0x0123456789ABCDEFabcdefU)operator(;)
hex(0x0123456789ABCDEFabcdefu)operator(;)
hex(0x0123456789ABCDEFabcdefL)operator(;)
hex(0x0123456789ABCDEFabcdefl)operator(;)
hex(0x0123456789ABCDEFabcdefUL)operator(;)
hex(0x0123456789ABCDEFabcdefUl)operator(;)
hex(0x0123456789ABCDEFabcdefuL)operator(;)
hex(0x0123456789ABCDEFabcdeful)operator(;)
hex(0x0123456789ABCDEFabcdefLU)operator(;)
hex(0x0123456789ABCDEFabcdefLu)operator(;)
hex(0x0123456789ABCDEFabcdeflU)operator(;)
hex(0x0123456789ABCDEFabcdeflu)operator(;)
hex(0X0123456789ABCDEFabcdef)operator(;)
hex(0X0123456789ABCDEFabcdefU)operator(;)
hex(0X0123456789ABCDEFabcdefu)operator(;)
hex(0X0123456789ABCDEFabcdefL)operator(;)
hex(0X0123456789ABCDEFabcdefl)operator(;)
hex(0X0123456789ABCDEFabcdefUL)operator(;)
hex(0X0123456789ABCDEFabcdefUl)operator(;)
hex(0X0123456789ABCDEFabcdefuL)operator(;)
hex(0X0123456789ABCDEFabcdeful)operator(;)
hex(0X0123456789ABCDEFabcdefLU)operator(;)
hex(0X0123456789ABCDEFabcdefLu)operator(;)
hex(0X0123456789ABCDEFabcdeflU)operator(;)
hex(0X0123456789ABCDEFabcdeflu)operator(;)

comment(// real-literal:)
comment(//   decimal-digits . decimal-digits exponent-part(opt\) real-type-suffix(opt\))
float(0123456789.0123456789)operator(;)
float(0123456789.0123456789e0123456789)operator(;)
float(0123456789.0123456789e+0123456789)operator(;)
float(0123456789.0123456789e-0123456789)operator(;)
float(0123456789.0123456789)operator(;)
float(0123456789.0123456789E0123456789)operator(;)
float(0123456789.0123456789E+0123456789)operator(;)
float(0123456789.0123456789E-0123456789)operator(;)

float(0123456789.0123456789F)operator(;)
float(0123456789.0123456789e0123456789F)operator(;)
float(0123456789.0123456789e+0123456789F)operator(;)
float(0123456789.0123456789e-0123456789F)operator(;)
float(0123456789.0123456789F)operator(;)
float(0123456789.0123456789E0123456789F)operator(;)
float(0123456789.0123456789E+0123456789F)operator(;)
float(0123456789.0123456789E-0123456789F)operator(;)

float(0123456789.0123456789f)operator(;)
float(0123456789.0123456789e0123456789f)operator(;)
float(0123456789.0123456789e+0123456789f)operator(;)
float(0123456789.0123456789e-0123456789f)operator(;)
float(0123456789.0123456789f)operator(;)
float(0123456789.0123456789E0123456789f)operator(;)
float(0123456789.0123456789E+0123456789f)operator(;)
float(0123456789.0123456789E-0123456789f)operator(;)

float(0123456789.0123456789D)operator(;)
float(0123456789.0123456789e0123456789D)operator(;)
float(0123456789.0123456789e+0123456789D)operator(;)
float(0123456789.0123456789e-0123456789D)operator(;)
float(0123456789.0123456789D)operator(;)
float(0123456789.0123456789E0123456789D)operator(;)
float(0123456789.0123456789E+0123456789D)operator(;)
float(0123456789.0123456789E-0123456789D)operator(;)

float(0123456789.0123456789d)operator(;)
float(0123456789.0123456789e0123456789d)operator(;)
float(0123456789.0123456789e+0123456789d)operator(;)
float(0123456789.0123456789e-0123456789d)operator(;)
float(0123456789.0123456789d)operator(;)
float(0123456789.0123456789E0123456789d)operator(;)
float(0123456789.0123456789E+0123456789d)operator(;)
float(0123456789.0123456789E-0123456789d)operator(;)

float(0123456789.0123456789M)operator(;)
float(0123456789.0123456789e0123456789M)operator(;)
float(0123456789.0123456789e+0123456789M)operator(;)
float(0123456789.0123456789e-0123456789M)operator(;)
float(0123456789.0123456789M)operator(;)
float(0123456789.0123456789E0123456789M)operator(;)
float(0123456789.0123456789E+0123456789M)operator(;)
float(0123456789.0123456789E-0123456789M)operator(;)

float(0123456789.0123456789m)operator(;)
float(0123456789.0123456789e0123456789m)operator(;)
float(0123456789.0123456789e+0123456789m)operator(;)
float(0123456789.0123456789e-0123456789m)operator(;)
float(0123456789.0123456789m)operator(;)
float(0123456789.0123456789E0123456789m)operator(;)
float(0123456789.0123456789E+0123456789m)operator(;)
float(0123456789.0123456789E-0123456789m)operator(;)
comment(//   . decimal-digits exponent-part(opt\) real-type-suffix(opt\))
float(.0123456789)operator(;)
float(.0123456789e0123456789)operator(;)
float(.0123456789e+0123456789)operator(;)
float(.0123456789e-0123456789)operator(;)
float(.0123456789)operator(;)
float(.0123456789E0123456789)operator(;)
float(.0123456789E+0123456789)operator(;)
float(.0123456789E-0123456789)operator(;)

float(.0123456789F)operator(;)
float(.0123456789e0123456789F)operator(;)
float(.0123456789e+0123456789F)operator(;)
float(.0123456789e-0123456789F)operator(;)
float(.0123456789F)operator(;)
float(.0123456789E0123456789F)operator(;)
float(.0123456789E+0123456789F)operator(;)
float(.0123456789E-0123456789F)operator(;)

float(.0123456789f)operator(;)
float(.0123456789e0123456789f)operator(;)
float(.0123456789e+0123456789f)operator(;)
float(.0123456789e-0123456789f)operator(;)
float(.0123456789f)operator(;)
float(.0123456789E0123456789f)operator(;)
float(.0123456789E+0123456789f)operator(;)
float(.0123456789E-0123456789f)operator(;)

float(.0123456789D)operator(;)
float(.0123456789e0123456789D)operator(;)
float(.0123456789e+0123456789D)operator(;)
float(.0123456789e-0123456789D)operator(;)
float(.0123456789D)operator(;)
float(.0123456789E0123456789D)operator(;)
float(.0123456789E+0123456789D)operator(;)
float(.0123456789E-0123456789D)operator(;)

float(.0123456789d)operator(;)
float(.0123456789e0123456789d)operator(;)
float(.0123456789e+0123456789d)operator(;)
float(.0123456789e-0123456789d)operator(;)
float(.0123456789d)operator(;)
float(.0123456789E0123456789d)operator(;)
float(.0123456789E+0123456789d)operator(;)
float(.0123456789E-0123456789d)operator(;)

float(.0123456789M)operator(;)
float(.0123456789e0123456789M)operator(;)
float(.0123456789e+0123456789M)operator(;)
float(.0123456789e-0123456789M)operator(;)
float(.0123456789M)operator(;)
float(.0123456789E0123456789M)operator(;)
float(.0123456789E+0123456789M)operator(;)
float(.0123456789E-0123456789M)operator(;)

float(.0123456789m)operator(;)
float(.0123456789e0123456789m)operator(;)
float(.0123456789e+0123456789m)operator(;)
float(.0123456789e-0123456789m)operator(;)
float(.0123456789m)operator(;)
float(.0123456789E0123456789m)operator(;)
float(.0123456789E+0123456789m)operator(;)
float(.0123456789E-0123456789m)operator(;)
comment(//   decimal-digits   exponent-part   real-type-suffix(opt\))
float(0123456789e0123456789)operator(;)
float(0123456789e+0123456789)operator(;)
float(0123456789e-0123456789)operator(;)
float(0123456789E0123456789)operator(;)
float(0123456789E+0123456789)operator(;)
float(0123456789E-0123456789)operator(;)

float(0123456789e0123456789F)operator(;)
float(0123456789e+0123456789F)operator(;)
float(0123456789e-0123456789F)operator(;)
float(0123456789E0123456789F)operator(;)
float(0123456789E+0123456789F)operator(;)
float(0123456789E-0123456789F)operator(;)

float(0123456789e0123456789f)operator(;)
float(0123456789e+0123456789f)operator(;)
float(0123456789e-0123456789f)operator(;)
float(0123456789E0123456789f)operator(;)
float(0123456789E+0123456789f)operator(;)
float(0123456789E-0123456789f)operator(;)

float(0123456789e0123456789D)operator(;)
float(0123456789e+0123456789D)operator(;)
float(0123456789e-0123456789D)operator(;)
float(0123456789E0123456789D)operator(;)
float(0123456789E+0123456789D)operator(;)
float(0123456789E-0123456789D)operator(;)

float(0123456789e0123456789d)operator(;)
float(0123456789e+0123456789d)operator(;)
float(0123456789e-0123456789d)operator(;)
float(0123456789E0123456789d)operator(;)
float(0123456789E+0123456789d)operator(;)
float(0123456789E-0123456789d)operator(;)

float(0123456789e0123456789M)operator(;)
float(0123456789e+0123456789M)operator(;)
float(0123456789e-0123456789M)operator(;)
float(0123456789E0123456789M)operator(;)
float(0123456789E+0123456789M)operator(;)
float(0123456789E-0123456789M)operator(;)

float(0123456789e0123456789m)operator(;)
float(0123456789e+0123456789m)operator(;)
float(0123456789e-0123456789m)operator(;)
float(0123456789E0123456789m)operator(;)
float(0123456789E+0123456789m)operator(;)
float(0123456789E-0123456789m)operator(;)
comment(//   decimal-digits real-type-suffix)
float(0123456789F)operator(;)
float(0123456789f)operator(;)
float(0123456789D)operator(;)
float(0123456789d)operator(;)
float(0123456789M)operator(;)
float(0123456789m)operator(;)

comment(// character-literal:)
char('a')operator(;)
char('あ')operator(;)
char('\\'')operator(;)
char('\\"')operator(;)
char('\\\\')operator(;)
char('\\0')operator(;)
char('\\a')operator(;)
char('\\b')operator(;)
char('\\f')operator(;)
char('\\n')operator(;)
char('\\r')operator(;)
char('\\t')operator(;)
char('\\v')operator(;)
char('\\x0')operator(;)
char('\\x0123')operator(;)
char('\\xabcd')operator(;)
char('\\xABCD')operator(;)
char('\\u0123')operator(;)
char('\\uabcd')operator(;)
char('\\uABCD')operator(;)
char('\\U01234567')operator(;)
char('\\U78abcdef')operator(;)
char('\\U78ABCDEF')operator(;)

comment(// string-literal:)
comment(//   regular-string-literal)
string<delimiter(")content(aあ)delimiter(")>operator(;)
string<delimiter(")char(\\')char(\\")char(\\\\)char(\\0)char(\\a)char(\\b)char(\\f)char(\\n)char(\\r)char(\\t)char(\\v)delimiter(")>operator(;)
string<delimiter(")char(\\x0)char(\\x0123)char(\\xabcd)char(\\xABCD)delimiter(")>operator(;)
string<delimiter(")char(\\u0123)char(\\uabcd)char(\\uABCD)delimiter(")>operator(;)
string<delimiter(")char(\\U01234567)char(\\U78abcdef)char(\\U78ABCDEF)delimiter(")>operator(;)
comment(//   verbatim-string-literal)
string<delimiter(@")content(abc)char("")content(\\n\\x1)delimiter(")>operator(;)
string<delimiter(@")content(abc
def
g)delimiter(")>operator(;)

comment(// B.1.9 Operators and punctuators)
operator({) operator(}) operator([) operator(]) operator(() operator(\)) operator(.) operator(,) operator(:) operator(;)
operator(+) operator(-) operator(*) operator(/) operator(%) operator(&) operator(|) operator(^) operator(!) operator(~)
operator(=) operator(<) operator(>) operator(?) operator(??) operator(::) operator(++) operator(--) operator(&&) operator(||)
operator(->) operator(==) operator(!=) operator(<=) operator(>=) operator(+=) operator(-=) operator(*=) operator(/=) operator(%=)
operator(&=) operator(|=) operator(^=) operator(<<) operator(<<=) operator(=>)
operator(>>)
operator(>>=)
