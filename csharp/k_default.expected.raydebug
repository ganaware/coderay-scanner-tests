comment(// https://msdn.microsoft.com/en-us/library/vstudio/25tdedf5.aspx)

comment(// https://msdn.microsoft.com/en-us/library/vstudio/xwth0h0d.aspx)

keyword(namespace) ident(ConsoleApplication1)
operator({)
    keyword(class) class(Program)
    operator({)
        directive(static) directive(void) ident(Main)operator(()predefined_type(string)operator([]) ident(args)operator(\))
        operator({)
            comment(// Test with a non-empty list of integers.)
            ident(GenericList)operator(<)predefined_type(int)operator(>) ident(gll) operator(=) keyword(new) ident(GenericList)operator(<)predefined_type(int)operator(>(\);)
            ident(gll)operator(.)ident(AddNode)operator(()integer(5)operator(\);)
            ident(gll)operator(.)ident(AddNode)operator(()integer(4)operator(\);)
            ident(gll)operator(.)ident(AddNode)operator(()integer(3)operator(\);)
            predefined_type(int) ident(intVal) operator(=) ident(gll)operator(.)ident(GetLast)operator((\);)
            comment(// The following line displays 5.)
            ident(System)operator(.)ident(Console)operator(.)ident(WriteLine)operator(()ident(intVal)operator(\);)

            comment(// Test with an empty list of integers.)
            ident(GenericList)operator(<)predefined_type(int)operator(>) ident(gll2) operator(=) keyword(new) ident(GenericList)operator(<)predefined_type(int)operator(>(\);)
            ident(intVal) operator(=) ident(gll2)operator(.)ident(GetLast)operator((\);)
            comment(// The following line displays 0.)
            ident(System)operator(.)ident(Console)operator(.)ident(WriteLine)operator(()ident(intVal)operator(\);)

            comment(// Test with a non-empty list of strings.)
            ident(GenericList)operator(<)predefined_type(string)operator(>) ident(gll3) operator(=) keyword(new) ident(GenericList)operator(<)predefined_type(string)operator(>(\);)
            ident(gll3)operator(.)ident(AddNode)operator(()string<delimiter(")content(five)delimiter(")>operator(\);)
            ident(gll3)operator(.)ident(AddNode)operator(()string<delimiter(")content(four)delimiter(")>operator(\);)
            predefined_type(string) ident(sVal) operator(=) ident(gll3)operator(.)ident(GetLast)operator((\);)
            comment(// The following line displays five.)
            ident(System)operator(.)ident(Console)operator(.)ident(WriteLine)operator(()ident(sVal)operator(\);)

            comment(// Test with an empty list of strings.)
            ident(GenericList)operator(<)predefined_type(string)operator(>) ident(gll4) operator(=) keyword(new) ident(GenericList)operator(<)predefined_type(string)operator(>(\);)
            ident(sVal) operator(=) ident(gll4)operator(.)ident(GetLast)operator((\);)
            comment(// The following line displays a blank line.)
            ident(System)operator(.)ident(Console)operator(.)ident(WriteLine)operator(()ident(sVal)operator(\);)
        operator(})
    operator(})

    comment(// T is the type of data stored in a particular instance of GenericList. )
    directive(public) keyword(class) class(GenericList)operator(<)ident(T)operator(>)
    operator({)
        directive(private) keyword(class) class(Node)
        operator({)
            comment(// Each node has a reference to the next node in the list. )
            directive(public) ident(Node) ident(Next)operator(;)
            comment(// Each node holds a value of type T. )
            directive(public) ident(T) ident(Data)operator(;)
        operator(})

        comment(// The list is initially empty. )
        directive(private) ident(Node) ident(head) operator(=) predefined_constant(null)operator(;)

        comment(// Add a node at the beginning of the list with t as its data value. )
        directive(public) directive(void) ident(AddNode)operator(()ident(T) ident(t)operator(\))
        operator({)
            ident(Node) ident(newNode) operator(=) keyword(new) ident(Node)operator((\);)
            ident(newNode)operator(.)ident(Next) operator(=) ident(head)operator(;)
            ident(newNode)operator(.)ident(Data) operator(=) ident(t)operator(;)
            ident(head) operator(=) ident(newNode)operator(;)
        operator(})

        comment(// The following method returns the data value stored in the last node in )
        comment(// the list. If the list is empty, the default value for type T is )
        comment(// returned. )
        directive(public) ident(T) ident(GetLast)operator((\))
        operator({)
            comment(// The value of temp is returned as the value of the method.  )
            comment(// The following declaration initializes temp to the appropriate  )
            comment(// default value for type T. The default value is returned if the  )
            comment(// list is empty.)
            ident(T) ident(temp) operator(=) keyword(default)operator(()ident(T)operator(\);)

            ident(Node) ident(current) operator(=) ident(head)operator(;)
            keyword(while) operator(()ident(current) operator(!=) predefined_constant(null)operator(\))
            operator({)
                ident(temp) operator(=) ident(current)operator(.)ident(Data)operator(;)
                ident(current) operator(=) ident(current)operator(.)ident(Next)operator(;)
            operator(})
            keyword(return) ident(temp)operator(;)
        operator(})
    operator(})
operator(})
