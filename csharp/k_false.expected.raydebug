comment(// https://msdn.microsoft.com/en-us/library/vstudio/67bxt5ee.aspx)

comment(// https://msdn.microsoft.com/en-us/library/vstudio/6292hy1k.aspx)

comment(// For example purposes only. Use the built-in nullable bool  )
comment(// type (bool?\) whenever possible. )
directive(public) keyword(struct) class(DBBool)
operator({)
    comment(// The three possible DBBool values. )
    directive(public) directive(static) keyword(readonly) ident(DBBool) ident(Null) operator(=) keyword(new) ident(DBBool)operator(()integer(0)operator(\);)
    directive(public) directive(static) keyword(readonly) ident(DBBool) ident(False) operator(=) keyword(new) ident(DBBool)operator((-)integer(1)operator(\);)
    directive(public) directive(static) keyword(readonly) ident(DBBool) ident(True) operator(=) keyword(new) ident(DBBool)operator(()integer(1)operator(\);)
    comment(// Private field that stores -1, 0, 1 for False, Null, True. )
    predefined_type(sbyte) keyword(value)operator(;)
    comment(// Private instance constructor. The value parameter must be -1, 0, or 1.)
    ident(DBBool)operator(()predefined_type(int) keyword(value)operator(\))
    operator({)
        local_variable(this)operator(.)keyword(value) operator(=) operator(()predefined_type(sbyte)operator(\))keyword(value)operator(;)
    operator(})
    comment(// Properties to examine the value of a DBBool. Return true if this )
    comment(// DBBool has the given value, false otherwise. )
    directive(public) predefined_type(bool) ident(IsNull) operator({) keyword(get) operator({) keyword(return) keyword(value) operator(==) integer(0)operator(;) operator(}) operator(})
    directive(public) predefined_type(bool) ident(IsFalse) operator({) keyword(get) operator({) keyword(return) keyword(value) operator(<) integer(0)operator(;) operator(}) operator(})
    directive(public) predefined_type(bool) ident(IsTrue) operator({) keyword(get) operator({) keyword(return) keyword(value) operator(>) integer(0)operator(;) operator(}) operator(})
    comment(// Implicit conversion from bool to DBBool. Maps true to DBBool.True and )
    comment(// false to DBBool.False. )
    directive(public) directive(static) directive(implicit) keyword(operator) ident(DBBool)operator(()predefined_type(bool) ident(x)operator(\))
    operator({)
        keyword(return) ident(x) operator(?) ident(True) operator(:) ident(False)operator(;)
    operator(})
    comment(// Explicit conversion from DBBool to bool. Throws an exception if the )
    comment(// given DBBool is Null; otherwise returns true or false. )
    directive(public) directive(static) directive(explicit) keyword(operator) predefined_type(bool)operator(()ident(DBBool) ident(x)operator(\))
    operator({)
        keyword(if) operator(()ident(x)operator(.)keyword(value) operator(==) integer(0)operator(\)) keyword(throw) keyword(new) ident(InvalidOperationException)operator((\);)
        keyword(return) ident(x)operator(.)keyword(value) operator(>) integer(0)operator(;)
    operator(})
    comment(// Equality operator. Returns Null if either operand is Null; otherwise )
    comment(// returns True or False. )
    directive(public) directive(static) ident(DBBool) keyword(operator) operator(==()ident(DBBool) ident(x)operator(,) ident(DBBool) ident(y)operator(\))
    operator({)
        keyword(if) operator(()ident(x)operator(.)keyword(value) operator(==) integer(0) operator(||) ident(y)operator(.)keyword(value) operator(==) integer(0)operator(\)) keyword(return) ident(Null)operator(;)
        keyword(return) ident(x)operator(.)keyword(value) operator(==) ident(y)operator(.)keyword(value) operator(?) ident(True) operator(:) ident(False)operator(;)
    operator(})
    comment(// Inequality operator. Returns Null if either operand is Null; otherwise )
    comment(// returns True or False. )
    directive(public) directive(static) ident(DBBool) keyword(operator) operator(!=()ident(DBBool) ident(x)operator(,) ident(DBBool) ident(y)operator(\))
    operator({)
        keyword(if) operator(()ident(x)operator(.)keyword(value) operator(==) integer(0) operator(||) ident(y)operator(.)keyword(value) operator(==) integer(0)operator(\)) keyword(return) ident(Null)operator(;)
        keyword(return) ident(x)operator(.)keyword(value) operator(!=) ident(y)operator(.)keyword(value) operator(?) ident(True) operator(:) ident(False)operator(;)
    operator(})
    comment(// Logical negation operator. Returns True if the operand is False, Null )
    comment(// if the operand is Null, or False if the operand is True. )
    directive(public) directive(static) ident(DBBool) keyword(operator) operator(!()ident(DBBool) ident(x)operator(\))
    operator({)
        keyword(return) keyword(new) ident(DBBool)operator((-)ident(x)operator(.)keyword(value)operator(\);)
    operator(})
    comment(// Logical AND operator. Returns False if either operand is False, )
    comment(// Null if either operand is Null, otherwise True. )
    directive(public) directive(static) ident(DBBool) keyword(operator) operator(&()ident(DBBool) ident(x)operator(,) ident(DBBool) ident(y)operator(\))
    operator({)
        keyword(return) keyword(new) ident(DBBool)operator(()ident(x)operator(.)keyword(value) operator(<) ident(y)operator(.)keyword(value) operator(?) ident(x)operator(.)keyword(value) operator(:) ident(y)operator(.)keyword(value)operator(\);)
    operator(})
    comment(// Logical OR operator. Returns True if either operand is True,  )
    comment(// Null if either operand is Null, otherwise False. )
    directive(public) directive(static) ident(DBBool) keyword(operator) operator(|()ident(DBBool) ident(x)operator(,) ident(DBBool) ident(y)operator(\))
    operator({)
        keyword(return) keyword(new) ident(DBBool)operator(()ident(x)operator(.)keyword(value) operator(>) ident(y)operator(.)keyword(value) operator(?) ident(x)operator(.)keyword(value) operator(:) ident(y)operator(.)keyword(value)operator(\);)
    operator(})
    comment(// Definitely true operator. Returns true if the operand is True, false )
    comment(// otherwise. )
    directive(public) directive(static) predefined_type(bool) keyword(operator) predefined_constant(true)operator(()ident(DBBool) ident(x)operator(\))
    operator({)
        keyword(return) ident(x)operator(.)keyword(value) operator(>) integer(0)operator(;)
    operator(})
    comment(// Definitely false operator. Returns true if the operand is False, false )
    comment(// otherwise. )
    directive(public) directive(static) predefined_type(bool) keyword(operator) predefined_constant(false)operator(()ident(DBBool) ident(x)operator(\))
    operator({)
        keyword(return) ident(x)operator(.)keyword(value) operator(<) integer(0)operator(;)
    operator(})
    directive(public) directive(override) predefined_type(bool) ident(Equals)operator(()predefined_type(object) ident(obj)operator(\))
    operator({)
        keyword(if) operator((!()ident(obj) keyword(is) ident(DBBool)operator(\)\)) keyword(return) predefined_constant(false)operator(;)
        keyword(return) keyword(value) operator(==) operator((()ident(DBBool)operator(\))ident(obj)operator(\))operator(.)keyword(value)operator(;)
    operator(})
    directive(public) directive(override) predefined_type(int) ident(GetHashCode)operator((\))
    operator({)
        keyword(return) keyword(value)operator(;)
    operator(})
    directive(public) directive(override) predefined_type(string) ident(ToString)operator((\))
    operator({)
        keyword(if) operator(()keyword(value) operator(>) integer(0)operator(\)) keyword(return) string<delimiter(")content(DBBool.True)delimiter(")>operator(;)
        keyword(if) operator(()keyword(value) operator(<) integer(0)operator(\)) keyword(return) string<delimiter(")content(DBBool.False)delimiter(")>operator(;)
        keyword(return) string<delimiter(")content(DBBool.Null)delimiter(")>operator(;)
    operator(})
operator(})

comment(// https://msdn.microsoft.com/en-us/library/vstudio/x4bbw9d7.aspx)

keyword(class) class(TestClass)
operator({)
    directive(static) directive(void) ident(Main)operator((\)) 
    operator({)
        predefined_type(bool) ident(a) operator(=) predefined_constant(false)operator(;)
        ident(Console)operator(.)ident(WriteLine)operator(() ident(a) operator(?) string<delimiter(")content(yes)delimiter(")> operator(:) string<delimiter(")content(no)delimiter(")> operator(\);)
    operator(})
operator(})
comment(// Output: no)
