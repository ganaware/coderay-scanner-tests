comment(// https://msdn.microsoft.com/en-us/library/vstudio/sf985hc5.aspx)

directive(abstract) keyword(class) class(ShapesClass)
operator({)
    directive(abstract) directive(public) predefined_type(int) ident(Area)operator((\);)
operator(})
keyword(class) class(Square) operator(:) ident(ShapesClass)
operator({)
    predefined_type(int) ident(side) operator(=) integer(0)operator(;)

    directive(public) ident(Square)operator(()predefined_type(int) ident(n)operator(\))
    operator({)
        ident(side) operator(=) ident(n)operator(;)
    operator(})
    comment(// Area method is required to avoid )
    comment(// a compile-time error. )
    directive(public) directive(override) predefined_type(int) ident(Area)operator((\))
    operator({)
        keyword(return) ident(side) operator(*) ident(side)operator(;)
    operator(})

    directive(static) directive(void) ident(Main)operator((\)) 
    operator({)
        ident(Square) ident(sq) operator(=) keyword(new) ident(Square)operator(()integer(12)operator(\);)
        ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(Area of the square = {0})delimiter(")>operator(,) ident(sq)operator(.)ident(Area)operator((\)\);)
    operator(})

    keyword(interface) class(I)
    operator({)
        directive(void) ident(M)operator((\);)
    operator(})
    directive(abstract) keyword(class) class(C) operator(:) ident(I)
    operator({)
        directive(public) directive(abstract) directive(void) ident(M)operator((\);)
    operator(})

operator(})
comment(// Output: Area of the square = 144)

keyword(interface) class(I)
operator({)
    directive(void) ident(M)operator((\);)
operator(})
directive(abstract) keyword(class) class(C) operator(:) ident(I)
operator({)
    directive(public) directive(abstract) directive(void) ident(M)operator((\);)
operator(})

directive(abstract) keyword(class) class(BaseClass)   comment(// Abstract class)
operator({)
    directive(protected) predefined_type(int) ident(_x) operator(=) integer(100)operator(;)
    directive(protected) predefined_type(int) ident(_y) operator(=) integer(150)operator(;)
    directive(public) directive(abstract) directive(void) ident(AbstractMethod)operator((\);)   comment(// Abstract method )
    directive(public) directive(abstract) predefined_type(int) ident(X)    operator({) keyword(get)operator(;) operator(})
    directive(public) directive(abstract) predefined_type(int) ident(Y)    operator({) keyword(get)operator(;) operator(})
operator(})

keyword(class) class(DerivedClass) operator(:) ident(BaseClass)
operator({)
    directive(public) directive(override) directive(void) ident(AbstractMethod)operator((\))
    operator({)
        ident(_x)operator(++;)
        ident(_y)operator(++;)
    operator(})

    directive(public) directive(override) predefined_type(int) ident(X)   comment(// overriding property)
    operator({)
        keyword(get)
        operator({)
            keyword(return) ident(_x) operator(+) integer(10)operator(;)
        operator(})
    operator(})

    directive(public) directive(override) predefined_type(int) ident(Y)   comment(// overriding property)
    operator({)
        keyword(get)
        operator({)
            keyword(return) ident(_y) operator(+) integer(10)operator(;)
        operator(})
    operator(})

    directive(static) directive(void) ident(Main)operator((\))
    operator({)
        ident(DerivedClass) ident(o) operator(=) keyword(new) ident(DerivedClass)operator((\);)
        ident(o)operator(.)ident(AbstractMethod)operator((\);)
        ident(Console)operator(.)ident(WriteLine)operator(()string<delimiter(")content(x = {0}, y = {1})delimiter(")>operator(,) ident(o)operator(.)ident(X)operator(,) ident(o)operator(.)ident(Y)operator(\);)
    operator(})
operator(})
comment(// Output: x = 111, y = 161)

