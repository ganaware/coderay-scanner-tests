comment(// https://msdn.microsoft.com/en-us/library/vstudio/hh156513.aspx)

directive(public) keyword(async) ident(Task)operator(<)predefined_type(int)operator(>) ident(ExampleMethodAsync)operator((\))
operator({)
    comment(// . . . .)
operator(})

comment(// You can run this code in Visual Studio 2013 as a WPF app or a Windows Store app.)
comment(// You need a button (StartButton\) and a textbox (ResultsTextBox\).)
comment(// Remember to set the names and handler so that you have something like this:)
comment(// <Button Content="Button" HorizontalAlignment="Left" Margin="88,77,0,0" VerticalAlignment="Top" Width="75")
comment(//         Click="StartButton_Click" Name="StartButton"/>)
comment(// <TextBox HorizontalAlignment="Left" Height="137" Margin="88,140,0,0" TextWrapping="Wrap" )
comment(//          Text="TextBox" VerticalAlignment="Top" Width="310" Name="ResultsTextBox"/>)
        
comment(// To run the code as a WPF app:)
comment(//    paste this code into the MainWindow class in MainWindow.xaml.cs,)
comment(//    add a reference to System.Net.Http, and)
comment(//    add a using directive for System.Net.Http.)

comment(// To run the code as a Windows Store app:)
comment(//    paste this code into the MainPage class in MainPage.xaml.cs, and)
comment(//    add using directives for System.Net.Http and System.Threading.Tasks.)

directive(private) keyword(async) directive(void) ident(StartButton_Click)operator(()predefined_type(object) ident(sender)operator(,) ident(RoutedEventArgs) ident(e)operator(\))
operator({)
    comment(// ExampleMethodAsync returns a Task<int>, which means that the method)
    comment(// eventually produces an int result. However, ExampleMethodAsync returns)
    comment(// the Task<int> value as soon as it reaches an await.)
    ident(ResultsTextBox)operator(.)ident(Text) operator(+=) string<delimiter(")char(\\n)delimiter(")>operator(;)
    keyword(try)
    operator({)
        predefined_type(int) ident(length) operator(=) keyword(await) ident(ExampleMethodAsync)operator((\);)
        comment(// Note that you could put "await ExampleMethodAsync(\)" in the next line where)
        comment(// "length" is, but due to when '+=' fetches the value of ResultsTextBox, you)
        comment(// would not see the global side effect of ExampleMethodAsync setting the text.)
        ident(ResultsTextBox)operator(.)ident(Text) operator(+=) ident(String)operator(.)ident(Format)operator(()string<delimiter(")content(Length: {0})char(\\n)delimiter(")>operator(,) ident(length)operator(\);)
    operator(})
    keyword(catch) operator(()ident(Exception)operator(\))
    operator({)
        comment(// Process the exception if one occurs.)
    operator(})
operator(})

directive(public) keyword(async) ident(Task)operator(<)predefined_type(int)operator(>) ident(ExampleMethodAsync)operator((\))
operator({)
    keyword(var) ident(httpClient) operator(=) keyword(new) ident(HttpClient)operator((\);)
    predefined_type(int) ident(exampleInt) operator(=) operator(()keyword(await) ident(httpClient)operator(.)ident(GetStringAsync)operator(()string<delimiter(")content(http://msdn.microsoft.com)delimiter(")>operator(\)\))operator(.)ident(Length)operator(;)
    ident(ResultsTextBox)operator(.)ident(Text) operator(+=) string<delimiter(")content(Preparing to finish ExampleMethodAsync.)char(\\n)delimiter(")>operator(;)
    comment(// After the following return statement, any method that's awaiting)
    comment(// ExampleMethodAsync (in this case, StartButton_Click\) can get the )
    comment(// integer result.)
    keyword(return) ident(exampleInt)operator(;)
operator(})
comment(// Output:)
comment(// Preparing to finish ExampleMethodAsync.)
comment(// Length: 53292)
